// Code generated by protoc-gen-go.
// source: controldb.proto
// DO NOT EDIT!

/*
Package controldb_proto is a generated protocol buffer package.

It is generated from these files:
	controldb.proto

It has these top-level messages:
	DeviceKey
	Device
	CreateDeviceResponse
	DeleteDeviceResponse
	AllDevices
	ListDeviceRequest
	ServiceKey
	Service
	CreateServiceResponse
	DeleteServiceResponse
	AllServices
	ListServiceRequest
	ServiceAttrKey
	ServiceAttr
	CreateServiceAttrResponse
	DeleteServiceAttrResponse
	UpdateServiceAttrRequest
	UpdateServiceAttrResponse
	ServiceMemberKey
	ServiceMember
	CreateServiceMemberResponse
	DeleteServiceMemberResponse
	ListServiceMemberRequest
	UpdateServiceMemberRequest
	UpdateServiceMemberResponse
	MemberConfig
	ConfigFileKey
	ConfigFile
	CreateConfigFileResponse
	DeleteConfigFileResponse
*/
package controldb_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DeviceKey struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	DeviceName  string `protobuf:"bytes,2,opt,name=deviceName" json:"deviceName,omitempty"`
}

func (m *DeviceKey) Reset()                    { *m = DeviceKey{} }
func (m *DeviceKey) String() string            { return proto.CompactTextString(m) }
func (*DeviceKey) ProtoMessage()               {}
func (*DeviceKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceKey) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *DeviceKey) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type Device struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	DeviceName  string `protobuf:"bytes,2,opt,name=deviceName" json:"deviceName,omitempty"`
	ServiceName string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *Device) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *Device) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type CreateDeviceResponse struct {
}

func (m *CreateDeviceResponse) Reset()                    { *m = CreateDeviceResponse{} }
func (m *CreateDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeviceResponse) ProtoMessage()               {}
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DeleteDeviceResponse struct {
}

func (m *DeleteDeviceResponse) Reset()                    { *m = DeleteDeviceResponse{} }
func (m *DeleteDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeviceResponse) ProtoMessage()               {}
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AllDevices struct {
	Devices []*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
}

func (m *AllDevices) Reset()                    { *m = AllDevices{} }
func (m *AllDevices) String() string            { return proto.CompactTextString(m) }
func (*AllDevices) ProtoMessage()               {}
func (*AllDevices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AllDevices) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type ListDeviceRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
}

func (m *ListDeviceRequest) Reset()                    { *m = ListDeviceRequest{} }
func (m *ListDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDeviceRequest) ProtoMessage()               {}
func (*ListDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListDeviceRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type ServiceKey struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
}

func (m *ServiceKey) Reset()                    { *m = ServiceKey{} }
func (m *ServiceKey) String() string            { return proto.CompactTextString(m) }
func (*ServiceKey) ProtoMessage()               {}
func (*ServiceKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServiceKey) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ServiceKey) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type Service struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	ServiceUUID string `protobuf:"bytes,3,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Service) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *Service) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Service) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

type CreateServiceResponse struct {
}

func (m *CreateServiceResponse) Reset()                    { *m = CreateServiceResponse{} }
func (m *CreateServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceResponse) ProtoMessage()               {}
func (*CreateServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DeleteServiceResponse struct {
}

func (m *DeleteServiceResponse) Reset()                    { *m = DeleteServiceResponse{} }
func (m *DeleteServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceResponse) ProtoMessage()               {}
func (*DeleteServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type AllServices struct {
	Services []*Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *AllServices) Reset()                    { *m = AllServices{} }
func (m *AllServices) String() string            { return proto.CompactTextString(m) }
func (*AllServices) ProtoMessage()               {}
func (*AllServices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AllServices) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type ListServiceRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
}

func (m *ListServiceRequest) Reset()                    { *m = ListServiceRequest{} }
func (m *ListServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServiceRequest) ProtoMessage()               {}
func (*ListServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListServiceRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type ServiceAttrKey struct {
	ServiceUUID string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
}

func (m *ServiceAttrKey) Reset()                    { *m = ServiceAttrKey{} }
func (m *ServiceAttrKey) String() string            { return proto.CompactTextString(m) }
func (*ServiceAttrKey) ProtoMessage()               {}
func (*ServiceAttrKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ServiceAttrKey) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

type ServiceAttr struct {
	ServiceUUID string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
	// same with db.ServiceAttr.ServiceStatus: CREATING, ACTIVE, DELETING, DELETED
	ServiceStatus string `protobuf:"bytes,2,opt,name=serviceStatus" json:"serviceStatus,omitempty"`
	LastModified  int64  `protobuf:"varint,3,opt,name=lastModified" json:"lastModified,omitempty"`
	Replicas      int64  `protobuf:"varint,4,opt,name=replicas" json:"replicas,omitempty"`
	VolumeSizeGB  int64  `protobuf:"varint,5,opt,name=volumeSizeGB" json:"volumeSizeGB,omitempty"`
	ClusterName   string `protobuf:"bytes,6,opt,name=clusterName" json:"clusterName,omitempty"`
	ServiceName   string `protobuf:"bytes,7,opt,name=serviceName" json:"serviceName,omitempty"`
	DeviceName    string `protobuf:"bytes,8,opt,name=deviceName" json:"deviceName,omitempty"`
	// whether the service has the strict membership, such as database replicas.
	// if yes, each serviceMember will be assigned a member name and registered to DNS.
	// in aws, DNS will be Route53.
	RegisterDNS     bool   `protobuf:"varint,9,opt,name=registerDNS" json:"registerDNS,omitempty"`
	DomainName      string `protobuf:"bytes,10,opt,name=domainName" json:"domainName,omitempty"`
	HostedZoneID    string `protobuf:"bytes,11,opt,name=hostedZoneID" json:"hostedZoneID,omitempty"`
	RequireStaticIP bool   `protobuf:"varint,12,opt,name=requireStaticIP" json:"requireStaticIP,omitempty"`
}

func (m *ServiceAttr) Reset()                    { *m = ServiceAttr{} }
func (m *ServiceAttr) String() string            { return proto.CompactTextString(m) }
func (*ServiceAttr) ProtoMessage()               {}
func (*ServiceAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ServiceAttr) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

func (m *ServiceAttr) GetServiceStatus() string {
	if m != nil {
		return m.ServiceStatus
	}
	return ""
}

func (m *ServiceAttr) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *ServiceAttr) GetReplicas() int64 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *ServiceAttr) GetVolumeSizeGB() int64 {
	if m != nil {
		return m.VolumeSizeGB
	}
	return 0
}

func (m *ServiceAttr) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ServiceAttr) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *ServiceAttr) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ServiceAttr) GetRegisterDNS() bool {
	if m != nil {
		return m.RegisterDNS
	}
	return false
}

func (m *ServiceAttr) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *ServiceAttr) GetHostedZoneID() string {
	if m != nil {
		return m.HostedZoneID
	}
	return ""
}

func (m *ServiceAttr) GetRequireStaticIP() bool {
	if m != nil {
		return m.RequireStaticIP
	}
	return false
}

type CreateServiceAttrResponse struct {
}

func (m *CreateServiceAttrResponse) Reset()                    { *m = CreateServiceAttrResponse{} }
func (m *CreateServiceAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceAttrResponse) ProtoMessage()               {}
func (*CreateServiceAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type DeleteServiceAttrResponse struct {
}

func (m *DeleteServiceAttrResponse) Reset()                    { *m = DeleteServiceAttrResponse{} }
func (m *DeleteServiceAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceAttrResponse) ProtoMessage()               {}
func (*DeleteServiceAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type UpdateServiceAttrRequest struct {
	OldAttr *ServiceAttr `protobuf:"bytes,1,opt,name=oldAttr" json:"oldAttr,omitempty"`
	NewAttr *ServiceAttr `protobuf:"bytes,2,opt,name=newAttr" json:"newAttr,omitempty"`
}

func (m *UpdateServiceAttrRequest) Reset()                    { *m = UpdateServiceAttrRequest{} }
func (m *UpdateServiceAttrRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceAttrRequest) ProtoMessage()               {}
func (*UpdateServiceAttrRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateServiceAttrRequest) GetOldAttr() *ServiceAttr {
	if m != nil {
		return m.OldAttr
	}
	return nil
}

func (m *UpdateServiceAttrRequest) GetNewAttr() *ServiceAttr {
	if m != nil {
		return m.NewAttr
	}
	return nil
}

type UpdateServiceAttrResponse struct {
}

func (m *UpdateServiceAttrResponse) Reset()                    { *m = UpdateServiceAttrResponse{} }
func (m *UpdateServiceAttrResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceAttrResponse) ProtoMessage()               {}
func (*UpdateServiceAttrResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type ServiceMemberKey struct {
	ServiceUUID string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
	MemberName  string `protobuf:"bytes,2,opt,name=memberName" json:"memberName,omitempty"`
}

func (m *ServiceMemberKey) Reset()                    { *m = ServiceMemberKey{} }
func (m *ServiceMemberKey) String() string            { return proto.CompactTextString(m) }
func (*ServiceMemberKey) ProtoMessage()               {}
func (*ServiceMemberKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ServiceMemberKey) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

func (m *ServiceMemberKey) GetMemberName() string {
	if m != nil {
		return m.MemberName
	}
	return ""
}

type ServiceMember struct {
	ServiceUUID         string          `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
	MemberName          string          `protobuf:"bytes,2,opt,name=memberName" json:"memberName,omitempty"`
	AvailableZone       string          `protobuf:"bytes,3,opt,name=availableZone" json:"availableZone,omitempty"`
	TaskID              string          `protobuf:"bytes,4,opt,name=taskID" json:"taskID,omitempty"`
	ContainerInstanceID string          `protobuf:"bytes,5,opt,name=containerInstanceID" json:"containerInstanceID,omitempty"`
	ServerInstanceID    string          `protobuf:"bytes,6,opt,name=serverInstanceID" json:"serverInstanceID,omitempty"`
	LastModified        int64           `protobuf:"varint,7,opt,name=lastModified" json:"lastModified,omitempty"`
	VolumeID            string          `protobuf:"bytes,8,opt,name=volumeID" json:"volumeID,omitempty"`
	DeviceName          string          `protobuf:"bytes,9,opt,name=deviceName" json:"deviceName,omitempty"`
	StaticIP            string          `protobuf:"bytes,10,opt,name=staticIP" json:"staticIP,omitempty"`
	Configs             []*MemberConfig `protobuf:"bytes,11,rep,name=configs" json:"configs,omitempty"`
}

func (m *ServiceMember) Reset()                    { *m = ServiceMember{} }
func (m *ServiceMember) String() string            { return proto.CompactTextString(m) }
func (*ServiceMember) ProtoMessage()               {}
func (*ServiceMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ServiceMember) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

func (m *ServiceMember) GetMemberName() string {
	if m != nil {
		return m.MemberName
	}
	return ""
}

func (m *ServiceMember) GetAvailableZone() string {
	if m != nil {
		return m.AvailableZone
	}
	return ""
}

func (m *ServiceMember) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *ServiceMember) GetContainerInstanceID() string {
	if m != nil {
		return m.ContainerInstanceID
	}
	return ""
}

func (m *ServiceMember) GetServerInstanceID() string {
	if m != nil {
		return m.ServerInstanceID
	}
	return ""
}

func (m *ServiceMember) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *ServiceMember) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *ServiceMember) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ServiceMember) GetStaticIP() string {
	if m != nil {
		return m.StaticIP
	}
	return ""
}

func (m *ServiceMember) GetConfigs() []*MemberConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type CreateServiceMemberResponse struct {
}

func (m *CreateServiceMemberResponse) Reset()                    { *m = CreateServiceMemberResponse{} }
func (m *CreateServiceMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceMemberResponse) ProtoMessage()               {}
func (*CreateServiceMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type DeleteServiceMemberResponse struct {
}

func (m *DeleteServiceMemberResponse) Reset()                    { *m = DeleteServiceMemberResponse{} }
func (m *DeleteServiceMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceMemberResponse) ProtoMessage()               {}
func (*DeleteServiceMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type ListServiceMemberRequest struct {
	ServiceUUID string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
}

func (m *ListServiceMemberRequest) Reset()                    { *m = ListServiceMemberRequest{} }
func (m *ListServiceMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServiceMemberRequest) ProtoMessage()               {}
func (*ListServiceMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListServiceMemberRequest) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

type UpdateServiceMemberRequest struct {
	OldMember *ServiceMember `protobuf:"bytes,1,opt,name=oldMember" json:"oldMember,omitempty"`
	NewMember *ServiceMember `protobuf:"bytes,2,opt,name=newMember" json:"newMember,omitempty"`
}

func (m *UpdateServiceMemberRequest) Reset()                    { *m = UpdateServiceMemberRequest{} }
func (m *UpdateServiceMemberRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceMemberRequest) ProtoMessage()               {}
func (*UpdateServiceMemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UpdateServiceMemberRequest) GetOldMember() *ServiceMember {
	if m != nil {
		return m.OldMember
	}
	return nil
}

func (m *UpdateServiceMemberRequest) GetNewMember() *ServiceMember {
	if m != nil {
		return m.NewMember
	}
	return nil
}

type UpdateServiceMemberResponse struct {
}

func (m *UpdateServiceMemberResponse) Reset()                    { *m = UpdateServiceMemberResponse{} }
func (m *UpdateServiceMemberResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServiceMemberResponse) ProtoMessage()               {}
func (*UpdateServiceMemberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type MemberConfig struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	FileID   string `protobuf:"bytes,2,opt,name=fileID" json:"fileID,omitempty"`
	FileMD5  string `protobuf:"bytes,3,opt,name=fileMD5" json:"fileMD5,omitempty"`
}

func (m *MemberConfig) Reset()                    { *m = MemberConfig{} }
func (m *MemberConfig) String() string            { return proto.CompactTextString(m) }
func (*MemberConfig) ProtoMessage()               {}
func (*MemberConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MemberConfig) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *MemberConfig) GetFileID() string {
	if m != nil {
		return m.FileID
	}
	return ""
}

func (m *MemberConfig) GetFileMD5() string {
	if m != nil {
		return m.FileMD5
	}
	return ""
}

type ConfigFileKey struct {
	ServiceUUID string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
	FileID      string `protobuf:"bytes,2,opt,name=fileID" json:"fileID,omitempty"`
}

func (m *ConfigFileKey) Reset()                    { *m = ConfigFileKey{} }
func (m *ConfigFileKey) String() string            { return proto.CompactTextString(m) }
func (*ConfigFileKey) ProtoMessage()               {}
func (*ConfigFileKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ConfigFileKey) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

func (m *ConfigFileKey) GetFileID() string {
	if m != nil {
		return m.FileID
	}
	return ""
}

type ConfigFile struct {
	ServiceUUID  string `protobuf:"bytes,1,opt,name=serviceUUID" json:"serviceUUID,omitempty"`
	FileID       string `protobuf:"bytes,2,opt,name=fileID" json:"fileID,omitempty"`
	FileMD5      string `protobuf:"bytes,3,opt,name=fileMD5" json:"fileMD5,omitempty"`
	FileName     string `protobuf:"bytes,4,opt,name=fileName" json:"fileName,omitempty"`
	FileMode     uint32 `protobuf:"varint,5,opt,name=fileMode" json:"fileMode,omitempty"`
	LastModified int64  `protobuf:"varint,6,opt,name=lastModified" json:"lastModified,omitempty"`
	Content      string `protobuf:"bytes,7,opt,name=content" json:"content,omitempty"`
}

func (m *ConfigFile) Reset()                    { *m = ConfigFile{} }
func (m *ConfigFile) String() string            { return proto.CompactTextString(m) }
func (*ConfigFile) ProtoMessage()               {}
func (*ConfigFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ConfigFile) GetServiceUUID() string {
	if m != nil {
		return m.ServiceUUID
	}
	return ""
}

func (m *ConfigFile) GetFileID() string {
	if m != nil {
		return m.FileID
	}
	return ""
}

func (m *ConfigFile) GetFileMD5() string {
	if m != nil {
		return m.FileMD5
	}
	return ""
}

func (m *ConfigFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ConfigFile) GetFileMode() uint32 {
	if m != nil {
		return m.FileMode
	}
	return 0
}

func (m *ConfigFile) GetLastModified() int64 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

func (m *ConfigFile) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CreateConfigFileResponse struct {
}

func (m *CreateConfigFileResponse) Reset()                    { *m = CreateConfigFileResponse{} }
func (m *CreateConfigFileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateConfigFileResponse) ProtoMessage()               {}
func (*CreateConfigFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type DeleteConfigFileResponse struct {
}

func (m *DeleteConfigFileResponse) Reset()                    { *m = DeleteConfigFileResponse{} }
func (m *DeleteConfigFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteConfigFileResponse) ProtoMessage()               {}
func (*DeleteConfigFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func init() {
	proto.RegisterType((*DeviceKey)(nil), "controldb_proto.DeviceKey")
	proto.RegisterType((*Device)(nil), "controldb_proto.Device")
	proto.RegisterType((*CreateDeviceResponse)(nil), "controldb_proto.CreateDeviceResponse")
	proto.RegisterType((*DeleteDeviceResponse)(nil), "controldb_proto.DeleteDeviceResponse")
	proto.RegisterType((*AllDevices)(nil), "controldb_proto.AllDevices")
	proto.RegisterType((*ListDeviceRequest)(nil), "controldb_proto.ListDeviceRequest")
	proto.RegisterType((*ServiceKey)(nil), "controldb_proto.ServiceKey")
	proto.RegisterType((*Service)(nil), "controldb_proto.Service")
	proto.RegisterType((*CreateServiceResponse)(nil), "controldb_proto.CreateServiceResponse")
	proto.RegisterType((*DeleteServiceResponse)(nil), "controldb_proto.DeleteServiceResponse")
	proto.RegisterType((*AllServices)(nil), "controldb_proto.AllServices")
	proto.RegisterType((*ListServiceRequest)(nil), "controldb_proto.ListServiceRequest")
	proto.RegisterType((*ServiceAttrKey)(nil), "controldb_proto.ServiceAttrKey")
	proto.RegisterType((*ServiceAttr)(nil), "controldb_proto.ServiceAttr")
	proto.RegisterType((*CreateServiceAttrResponse)(nil), "controldb_proto.CreateServiceAttrResponse")
	proto.RegisterType((*DeleteServiceAttrResponse)(nil), "controldb_proto.DeleteServiceAttrResponse")
	proto.RegisterType((*UpdateServiceAttrRequest)(nil), "controldb_proto.UpdateServiceAttrRequest")
	proto.RegisterType((*UpdateServiceAttrResponse)(nil), "controldb_proto.UpdateServiceAttrResponse")
	proto.RegisterType((*ServiceMemberKey)(nil), "controldb_proto.ServiceMemberKey")
	proto.RegisterType((*ServiceMember)(nil), "controldb_proto.ServiceMember")
	proto.RegisterType((*CreateServiceMemberResponse)(nil), "controldb_proto.CreateServiceMemberResponse")
	proto.RegisterType((*DeleteServiceMemberResponse)(nil), "controldb_proto.DeleteServiceMemberResponse")
	proto.RegisterType((*ListServiceMemberRequest)(nil), "controldb_proto.ListServiceMemberRequest")
	proto.RegisterType((*UpdateServiceMemberRequest)(nil), "controldb_proto.UpdateServiceMemberRequest")
	proto.RegisterType((*UpdateServiceMemberResponse)(nil), "controldb_proto.UpdateServiceMemberResponse")
	proto.RegisterType((*MemberConfig)(nil), "controldb_proto.MemberConfig")
	proto.RegisterType((*ConfigFileKey)(nil), "controldb_proto.ConfigFileKey")
	proto.RegisterType((*ConfigFile)(nil), "controldb_proto.ConfigFile")
	proto.RegisterType((*CreateConfigFileResponse)(nil), "controldb_proto.CreateConfigFileResponse")
	proto.RegisterType((*DeleteConfigFileResponse)(nil), "controldb_proto.DeleteConfigFileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ControlDBService service

type ControlDBServiceClient interface {
	CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetDevice(ctx context.Context, in *DeviceKey, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *DeviceKey, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (ControlDBService_ListDevicesClient, error)
	CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	GetService(ctx context.Context, in *ServiceKey, opts ...grpc.CallOption) (*Service, error)
	DeleteService(ctx context.Context, in *ServiceKey, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
	ListServices(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (ControlDBService_ListServicesClient, error)
	CreateServiceAttr(ctx context.Context, in *ServiceAttr, opts ...grpc.CallOption) (*CreateServiceAttrResponse, error)
	GetServiceAttr(ctx context.Context, in *ServiceAttrKey, opts ...grpc.CallOption) (*ServiceAttr, error)
	DeleteServiceAttr(ctx context.Context, in *ServiceAttrKey, opts ...grpc.CallOption) (*DeleteServiceAttrResponse, error)
	UpdateServiceAttr(ctx context.Context, in *UpdateServiceAttrRequest, opts ...grpc.CallOption) (*UpdateServiceAttrResponse, error)
	CreateServiceMember(ctx context.Context, in *ServiceMember, opts ...grpc.CallOption) (*CreateServiceMemberResponse, error)
	GetServiceMember(ctx context.Context, in *ServiceMemberKey, opts ...grpc.CallOption) (*ServiceMember, error)
	DeleteServiceMember(ctx context.Context, in *ServiceMemberKey, opts ...grpc.CallOption) (*DeleteServiceMemberResponse, error)
	ListServiceMembers(ctx context.Context, in *ListServiceMemberRequest, opts ...grpc.CallOption) (ControlDBService_ListServiceMembersClient, error)
	UpdateServiceMember(ctx context.Context, in *UpdateServiceMemberRequest, opts ...grpc.CallOption) (*UpdateServiceMemberResponse, error)
	CreateConfigFile(ctx context.Context, in *ConfigFile, opts ...grpc.CallOption) (*CreateConfigFileResponse, error)
	GetConfigFile(ctx context.Context, in *ConfigFileKey, opts ...grpc.CallOption) (*ConfigFile, error)
	DeleteConfigFile(ctx context.Context, in *ConfigFileKey, opts ...grpc.CallOption) (*DeleteConfigFileResponse, error)
}

type controlDBServiceClient struct {
	cc *grpc.ClientConn
}

func NewControlDBServiceClient(cc *grpc.ClientConn) ControlDBServiceClient {
	return &controlDBServiceClient{cc}
}

func (c *controlDBServiceClient) CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/CreateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) GetDevice(ctx context.Context, in *DeviceKey, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/GetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) DeleteDevice(ctx context.Context, in *DeviceKey, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/DeleteDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) ListDevices(ctx context.Context, in *ListDeviceRequest, opts ...grpc.CallOption) (ControlDBService_ListDevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControlDBService_serviceDesc.Streams[0], c.cc, "/controldb_proto.ControlDBService/ListDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlDBServiceListDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlDBService_ListDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type controlDBServiceListDevicesClient struct {
	grpc.ClientStream
}

func (x *controlDBServiceListDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlDBServiceClient) CreateService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	out := new(CreateServiceResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) GetService(ctx context.Context, in *ServiceKey, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/GetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) DeleteService(ctx context.Context, in *ServiceKey, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	out := new(DeleteServiceResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) ListServices(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (ControlDBService_ListServicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControlDBService_serviceDesc.Streams[1], c.cc, "/controldb_proto.ControlDBService/ListServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlDBServiceListServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlDBService_ListServicesClient interface {
	Recv() (*Service, error)
	grpc.ClientStream
}

type controlDBServiceListServicesClient struct {
	grpc.ClientStream
}

func (x *controlDBServiceListServicesClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlDBServiceClient) CreateServiceAttr(ctx context.Context, in *ServiceAttr, opts ...grpc.CallOption) (*CreateServiceAttrResponse, error) {
	out := new(CreateServiceAttrResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/CreateServiceAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) GetServiceAttr(ctx context.Context, in *ServiceAttrKey, opts ...grpc.CallOption) (*ServiceAttr, error) {
	out := new(ServiceAttr)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/GetServiceAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) DeleteServiceAttr(ctx context.Context, in *ServiceAttrKey, opts ...grpc.CallOption) (*DeleteServiceAttrResponse, error) {
	out := new(DeleteServiceAttrResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/DeleteServiceAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) UpdateServiceAttr(ctx context.Context, in *UpdateServiceAttrRequest, opts ...grpc.CallOption) (*UpdateServiceAttrResponse, error) {
	out := new(UpdateServiceAttrResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/UpdateServiceAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) CreateServiceMember(ctx context.Context, in *ServiceMember, opts ...grpc.CallOption) (*CreateServiceMemberResponse, error) {
	out := new(CreateServiceMemberResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/CreateServiceMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) GetServiceMember(ctx context.Context, in *ServiceMemberKey, opts ...grpc.CallOption) (*ServiceMember, error) {
	out := new(ServiceMember)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/GetServiceMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) DeleteServiceMember(ctx context.Context, in *ServiceMemberKey, opts ...grpc.CallOption) (*DeleteServiceMemberResponse, error) {
	out := new(DeleteServiceMemberResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/DeleteServiceMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) ListServiceMembers(ctx context.Context, in *ListServiceMemberRequest, opts ...grpc.CallOption) (ControlDBService_ListServiceMembersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ControlDBService_serviceDesc.Streams[2], c.cc, "/controldb_proto.ControlDBService/ListServiceMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlDBServiceListServiceMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlDBService_ListServiceMembersClient interface {
	Recv() (*ServiceMember, error)
	grpc.ClientStream
}

type controlDBServiceListServiceMembersClient struct {
	grpc.ClientStream
}

func (x *controlDBServiceListServiceMembersClient) Recv() (*ServiceMember, error) {
	m := new(ServiceMember)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlDBServiceClient) UpdateServiceMember(ctx context.Context, in *UpdateServiceMemberRequest, opts ...grpc.CallOption) (*UpdateServiceMemberResponse, error) {
	out := new(UpdateServiceMemberResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/UpdateServiceMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) CreateConfigFile(ctx context.Context, in *ConfigFile, opts ...grpc.CallOption) (*CreateConfigFileResponse, error) {
	out := new(CreateConfigFileResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/CreateConfigFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) GetConfigFile(ctx context.Context, in *ConfigFileKey, opts ...grpc.CallOption) (*ConfigFile, error) {
	out := new(ConfigFile)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/GetConfigFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlDBServiceClient) DeleteConfigFile(ctx context.Context, in *ConfigFileKey, opts ...grpc.CallOption) (*DeleteConfigFileResponse, error) {
	out := new(DeleteConfigFileResponse)
	err := grpc.Invoke(ctx, "/controldb_proto.ControlDBService/DeleteConfigFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ControlDBService service

type ControlDBServiceServer interface {
	CreateDevice(context.Context, *Device) (*CreateDeviceResponse, error)
	GetDevice(context.Context, *DeviceKey) (*Device, error)
	DeleteDevice(context.Context, *DeviceKey) (*DeleteDeviceResponse, error)
	ListDevices(*ListDeviceRequest, ControlDBService_ListDevicesServer) error
	CreateService(context.Context, *Service) (*CreateServiceResponse, error)
	GetService(context.Context, *ServiceKey) (*Service, error)
	DeleteService(context.Context, *ServiceKey) (*DeleteServiceResponse, error)
	ListServices(*ListServiceRequest, ControlDBService_ListServicesServer) error
	CreateServiceAttr(context.Context, *ServiceAttr) (*CreateServiceAttrResponse, error)
	GetServiceAttr(context.Context, *ServiceAttrKey) (*ServiceAttr, error)
	DeleteServiceAttr(context.Context, *ServiceAttrKey) (*DeleteServiceAttrResponse, error)
	UpdateServiceAttr(context.Context, *UpdateServiceAttrRequest) (*UpdateServiceAttrResponse, error)
	CreateServiceMember(context.Context, *ServiceMember) (*CreateServiceMemberResponse, error)
	GetServiceMember(context.Context, *ServiceMemberKey) (*ServiceMember, error)
	DeleteServiceMember(context.Context, *ServiceMemberKey) (*DeleteServiceMemberResponse, error)
	ListServiceMembers(*ListServiceMemberRequest, ControlDBService_ListServiceMembersServer) error
	UpdateServiceMember(context.Context, *UpdateServiceMemberRequest) (*UpdateServiceMemberResponse, error)
	CreateConfigFile(context.Context, *ConfigFile) (*CreateConfigFileResponse, error)
	GetConfigFile(context.Context, *ConfigFileKey) (*ConfigFile, error)
	DeleteConfigFile(context.Context, *ConfigFileKey) (*DeleteConfigFileResponse, error)
}

func RegisterControlDBServiceServer(s *grpc.Server, srv ControlDBServiceServer) {
	s.RegisterService(&_ControlDBService_serviceDesc, srv)
}

func _ControlDBService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).CreateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).GetDevice(ctx, req.(*DeviceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).DeleteDevice(ctx, req.(*DeviceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_ListDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlDBServiceServer).ListDevices(m, &controlDBServiceListDevicesServer{stream})
}

type ControlDBService_ListDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type controlDBServiceListDevicesServer struct {
	grpc.ServerStream
}

func (x *controlDBServiceListDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlDBService_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).CreateService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).GetService(ctx, req.(*ServiceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).DeleteService(ctx, req.(*ServiceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_ListServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListServiceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlDBServiceServer).ListServices(m, &controlDBServiceListServicesServer{stream})
}

type ControlDBService_ListServicesServer interface {
	Send(*Service) error
	grpc.ServerStream
}

type controlDBServiceListServicesServer struct {
	grpc.ServerStream
}

func (x *controlDBServiceListServicesServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlDBService_CreateServiceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAttr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).CreateServiceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/CreateServiceAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).CreateServiceAttr(ctx, req.(*ServiceAttr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_GetServiceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAttrKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).GetServiceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/GetServiceAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).GetServiceAttr(ctx, req.(*ServiceAttrKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_DeleteServiceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAttrKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).DeleteServiceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/DeleteServiceAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).DeleteServiceAttr(ctx, req.(*ServiceAttrKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_UpdateServiceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).UpdateServiceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/UpdateServiceAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).UpdateServiceAttr(ctx, req.(*UpdateServiceAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_CreateServiceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).CreateServiceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/CreateServiceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).CreateServiceMember(ctx, req.(*ServiceMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_GetServiceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMemberKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).GetServiceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/GetServiceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).GetServiceMember(ctx, req.(*ServiceMemberKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_DeleteServiceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMemberKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).DeleteServiceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/DeleteServiceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).DeleteServiceMember(ctx, req.(*ServiceMemberKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_ListServiceMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListServiceMemberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlDBServiceServer).ListServiceMembers(m, &controlDBServiceListServiceMembersServer{stream})
}

type ControlDBService_ListServiceMembersServer interface {
	Send(*ServiceMember) error
	grpc.ServerStream
}

type controlDBServiceListServiceMembersServer struct {
	grpc.ServerStream
}

func (x *controlDBServiceListServiceMembersServer) Send(m *ServiceMember) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlDBService_UpdateServiceMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).UpdateServiceMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/UpdateServiceMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).UpdateServiceMember(ctx, req.(*UpdateServiceMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_CreateConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).CreateConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/CreateConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).CreateConfigFile(ctx, req.(*ConfigFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_GetConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigFileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).GetConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/GetConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).GetConfigFile(ctx, req.(*ConfigFileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlDBService_DeleteConfigFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigFileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlDBServiceServer).DeleteConfigFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controldb_proto.ControlDBService/DeleteConfigFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlDBServiceServer).DeleteConfigFile(ctx, req.(*ConfigFileKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlDBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controldb_proto.ControlDBService",
	HandlerType: (*ControlDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _ControlDBService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ControlDBService_GetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _ControlDBService_DeleteDevice_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _ControlDBService_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ControlDBService_GetService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ControlDBService_DeleteService_Handler,
		},
		{
			MethodName: "CreateServiceAttr",
			Handler:    _ControlDBService_CreateServiceAttr_Handler,
		},
		{
			MethodName: "GetServiceAttr",
			Handler:    _ControlDBService_GetServiceAttr_Handler,
		},
		{
			MethodName: "DeleteServiceAttr",
			Handler:    _ControlDBService_DeleteServiceAttr_Handler,
		},
		{
			MethodName: "UpdateServiceAttr",
			Handler:    _ControlDBService_UpdateServiceAttr_Handler,
		},
		{
			MethodName: "CreateServiceMember",
			Handler:    _ControlDBService_CreateServiceMember_Handler,
		},
		{
			MethodName: "GetServiceMember",
			Handler:    _ControlDBService_GetServiceMember_Handler,
		},
		{
			MethodName: "DeleteServiceMember",
			Handler:    _ControlDBService_DeleteServiceMember_Handler,
		},
		{
			MethodName: "UpdateServiceMember",
			Handler:    _ControlDBService_UpdateServiceMember_Handler,
		},
		{
			MethodName: "CreateConfigFile",
			Handler:    _ControlDBService_CreateConfigFile_Handler,
		},
		{
			MethodName: "GetConfigFile",
			Handler:    _ControlDBService_GetConfigFile_Handler,
		},
		{
			MethodName: "DeleteConfigFile",
			Handler:    _ControlDBService_DeleteConfigFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDevices",
			Handler:       _ControlDBService_ListDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListServices",
			Handler:       _ControlDBService_ListServices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListServiceMembers",
			Handler:       _ControlDBService_ListServiceMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controldb.proto",
}

func init() { proto.RegisterFile("controldb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xb6, 0xe3, 0xd4, 0x8e, 0x8f, 0xed, 0xd4, 0x99, 0x40, 0xbb, 0x6c, 0x68, 0x28, 0x0b, 0xad,
	0x92, 0x10, 0x45, 0x25, 0xd0, 0x72, 0x53, 0x09, 0x35, 0x31, 0x54, 0x11, 0x24, 0x0a, 0x36, 0x01,
	0x09, 0x55, 0x8a, 0xd6, 0xf6, 0xa4, 0x5d, 0xb1, 0xf6, 0x86, 0x9d, 0x75, 0x10, 0x3c, 0x02, 0x4f,
	0xc0, 0x35, 0xd7, 0xf0, 0x3a, 0x3c, 0x0f, 0xf3, 0xb7, 0x3f, 0xb3, 0x33, 0xbb, 0x6b, 0x91, 0xde,
	0x79, 0xcf, 0xcf, 0x37, 0x67, 0xbe, 0xf3, 0xcd, 0xcc, 0x31, 0xdc, 0x9d, 0x04, 0xf3, 0x28, 0x0c,
	0xfc, 0xe9, 0xf8, 0xe0, 0x3a, 0x0c, 0xa2, 0x00, 0xa5, 0x86, 0x4b, 0x6e, 0x70, 0x4e, 0xa1, 0x3d,
	0xc0, 0x37, 0xde, 0x04, 0x7f, 0x83, 0x7f, 0x43, 0x0f, 0xa1, 0x33, 0xf1, 0x17, 0x24, 0xc2, 0xe1,
	0x99, 0x3b, 0xc3, 0x56, 0xfd, 0x61, 0x7d, 0xa7, 0x3d, 0xcc, 0x9a, 0xd0, 0x36, 0xc0, 0x94, 0x87,
	0xf3, 0x80, 0x15, 0x1e, 0x90, 0xb1, 0x38, 0x3e, 0x34, 0x05, 0xdc, 0xed, 0xb1, 0x18, 0x02, 0xc1,
	0x61, 0x12, 0xd0, 0x10, 0x08, 0x19, 0x93, 0x73, 0x0f, 0xde, 0x39, 0x0e, 0xb1, 0x1b, 0x61, 0xb1,
	0xe6, 0x10, 0x93, 0xeb, 0x60, 0x4e, 0xb8, 0x7d, 0x80, 0x7d, 0xac, 0xd9, 0xbf, 0x04, 0x78, 0xe1,
	0xfb, 0xc2, 0x48, 0xd0, 0xa7, 0xd0, 0x12, 0xab, 0x11, 0x5a, 0x5d, 0x63, 0xa7, 0x73, 0x78, 0xff,
	0x20, 0xc7, 0xce, 0x81, 0xcc, 0x8f, 0xe3, 0x9c, 0xa7, 0xb0, 0xf1, 0xad, 0x47, 0xa2, 0x18, 0xf6,
	0x97, 0x05, 0x26, 0x51, 0xf5, 0x4e, 0x9d, 0x73, 0x80, 0x91, 0x28, 0x7b, 0x39, 0x96, 0x73, 0x3b,
	0x5f, 0xd1, 0x77, 0x1e, 0x40, 0x4b, 0x22, 0xbe, 0x0d, 0xb8, 0x4c, 0xc4, 0xc5, 0xc5, 0xc9, 0x20,
	0x47, 0x35, 0x33, 0x39, 0xf7, 0xe1, 0x5d, 0x41, 0xb5, 0x5c, 0x36, 0xe1, 0x94, 0x3a, 0x04, 0xd7,
	0x79, 0xc7, 0x31, 0x74, 0x28, 0xd9, 0xd2, 0x4a, 0xd0, 0xe7, 0xb0, 0x26, 0xf1, 0x62, 0xba, 0x2d,
	0x8d, 0xee, 0x18, 0x22, 0x89, 0x74, 0x9e, 0x01, 0x62, 0x84, 0x27, 0xd8, 0xcb, 0x32, 0x7e, 0x08,
	0xeb, 0x32, 0xe7, 0x45, 0x14, 0x85, 0x92, 0xf5, 0xec, 0x16, 0xeb, 0xfa, 0x16, 0xff, 0x69, 0x40,
	0x27, 0x93, 0x54, 0x9d, 0x81, 0x3e, 0x86, 0x9e, 0xfc, 0x1c, 0x45, 0x6e, 0xb4, 0x20, 0x92, 0x5a,
	0xd5, 0x88, 0x1c, 0xe8, 0xfa, 0x2e, 0x89, 0x4e, 0x83, 0xa9, 0x77, 0xe5, 0xe1, 0x29, 0x67, 0xb7,
	0x31, 0x54, 0x6c, 0xc8, 0x86, 0xb5, 0x10, 0x5f, 0xfb, 0xde, 0xc4, 0x25, 0xd6, 0x2a, 0xf7, 0x27,
	0xdf, 0x2c, 0xff, 0x26, 0xf0, 0x17, 0x33, 0x3c, 0xf2, 0x7e, 0xc7, 0x2f, 0x8f, 0xac, 0x3b, 0x22,
	0x3f, 0x6b, 0xcb, 0x33, 0xd2, 0xac, 0x14, 0x41, 0x4b, 0x17, 0x81, 0x7a, 0x1e, 0xd7, 0x4c, 0xe7,
	0x31, 0xc4, 0xaf, 0x3d, 0x86, 0x38, 0x38, 0x1b, 0x59, 0x6d, 0x1a, 0xb0, 0x36, 0xcc, 0x9a, 0x38,
	0x42, 0x30, 0x73, 0xbd, 0x39, 0x47, 0x00, 0x89, 0x90, 0x58, 0xd8, 0x4e, 0xde, 0x04, 0x34, 0x78,
	0xfa, 0x53, 0x30, 0xc7, 0x94, 0xd2, 0x0e, 0x8f, 0x50, 0x6c, 0x68, 0x07, 0xee, 0x86, 0xb4, 0xcd,
	0x5e, 0xc8, 0xe9, 0xf3, 0x26, 0x27, 0xe7, 0x56, 0x97, 0xaf, 0x94, 0x37, 0x3b, 0x5b, 0xf0, 0x9e,
	0x22, 0x49, 0xd6, 0xb4, 0x44, 0x7d, 0xd4, 0xa9, 0xc8, 0x52, 0x71, 0xfe, 0x51, 0x07, 0xeb, 0xe2,
	0x7a, 0x9a, 0x4f, 0x15, 0xe2, 0x7a, 0x06, 0x2d, 0x2a, 0x49, 0x66, 0xe1, 0x2d, 0xef, 0x1c, 0xbe,
	0x5f, 0xa4, 0x53, 0x9e, 0x15, 0x07, 0xb3, 0xbc, 0x39, 0xfe, 0x95, 0xe7, 0xad, 0x2c, 0x93, 0x27,
	0x83, 0x59, 0xa5, 0x86, 0x5a, 0x64, 0xa5, 0xdf, 0x43, 0x5f, 0x9a, 0x4f, 0xf1, 0x6c, 0x8c, 0x97,
	0x53, 0x32, 0xeb, 0xc3, 0x8c, 0x87, 0x67, 0x6f, 0xd6, 0xd4, 0xe2, 0xfc, 0xd5, 0x80, 0x9e, 0x02,
	0x7b, 0x7b, 0x4c, 0x76, 0x16, 0xdc, 0x1b, 0xd7, 0xf3, 0xdd, 0xb1, 0x8f, 0x59, 0x2b, 0xe5, 0x25,
	0xa2, 0x1a, 0xd1, 0x3d, 0x68, 0x46, 0x2e, 0xf9, 0x99, 0x2e, 0xb1, 0xca, 0xdd, 0xf2, 0x0b, 0x3d,
	0x81, 0x4d, 0x46, 0x16, 0x15, 0x0a, 0x0e, 0x4f, 0xe6, 0x24, 0x72, 0xe7, 0x13, 0x26, 0x90, 0x3b,
	0x3c, 0xc8, 0xe4, 0x42, 0x7b, 0xd0, 0x67, 0xe5, 0x29, 0xe1, 0x42, 0xf6, 0x9a, 0x5d, 0x3b, 0x81,
	0x2d, 0xf3, 0x09, 0x14, 0x27, 0x8a, 0xe2, 0x08, 0xed, 0x27, 0xdf, 0xb9, 0x93, 0xd1, 0xd6, 0x4e,
	0x06, 0xcd, 0x25, 0xb1, 0x58, 0x85, 0xea, 0x93, 0x6f, 0xf4, 0x05, 0xb4, 0x68, 0xf9, 0x57, 0xde,
	0x6b, 0x42, 0xe5, 0xce, 0xae, 0xbd, 0x07, 0x9a, 0x2c, 0x44, 0x0f, 0x8e, 0x79, 0xd4, 0x30, 0x8e,
	0x76, 0x1e, 0xc0, 0x96, 0x22, 0x6f, 0x11, 0x95, 0x28, 0x83, 0xba, 0x15, 0x81, 0xe7, 0xdc, 0xcf,
	0xc1, 0xca, 0x5c, 0x9c, 0xb1, 0x33, 0xb9, 0x3e, 0x2b, 0xae, 0xc2, 0x3f, 0xeb, 0x60, 0x2b, 0xa2,
	0x54, 0x01, 0x9e, 0x43, 0x9b, 0x96, 0x2f, 0x6c, 0xf2, 0x90, 0x6c, 0x17, 0x89, 0x5d, 0x66, 0xa6,
	0x09, 0x2c, 0x9b, 0x6a, 0x5f, 0x66, 0xaf, 0x2c, 0x97, 0x9d, 0x24, 0xb0, 0x7d, 0x1b, 0x2b, 0x93,
	0xfb, 0x7e, 0x05, 0xdd, 0x2c, 0x9d, 0xac, 0x35, 0x57, 0x9e, 0x8f, 0x33, 0xef, 0x44, 0xf2, 0xcd,
	0xc4, 0xc8, 0x7e, 0x53, 0x0a, 0x84, 0x9c, 0xe5, 0x17, 0xb2, 0xa0, 0xc5, 0x7e, 0x9d, 0x0e, 0x9e,
	0x4a, 0x11, 0xc7, 0x9f, 0xce, 0x09, 0xf4, 0x04, 0xee, 0xd7, 0xd4, 0xb0, 0xdc, 0x59, 0x2c, 0x58,
	0xc4, 0xf9, 0xb7, 0x0e, 0x90, 0x62, 0xfd, 0x7f, 0xa0, 0xe2, 0x6a, 0x95, 0xbd, 0xaf, 0xe6, 0xf6,
	0x2e, 0x7d, 0x54, 0xfe, 0x98, 0x9f, 0xb2, 0xde, 0x30, 0xf9, 0xd6, 0x8e, 0x4b, 0xd3, 0x70, 0x5c,
	0x2c, 0x2e, 0xeb, 0x08, 0xcf, 0x23, 0xf9, 0x94, 0xc4, 0x9f, 0x8e, 0x0d, 0x96, 0xd0, 0x6d, 0xba,
	0xbb, 0xa4, 0x3b, 0xd4, 0x27, 0x44, 0xab, 0xfb, 0x0e, 0xff, 0x5e, 0x87, 0xfe, 0xb1, 0x50, 0xc1,
	0xe0, 0x28, 0x1e, 0x6e, 0xce, 0xa1, 0x9b, 0x9d, 0xf0, 0x50, 0xd1, 0x88, 0x66, 0x3f, 0xd2, 0x1c,
	0xc6, 0xc9, 0xb0, 0x86, 0x8e, 0xa0, 0xfd, 0x12, 0xcb, 0x09, 0x0e, 0xd9, 0x05, 0x70, 0xb4, 0xb5,
	0x76, 0xd1, 0x52, 0x14, 0x63, 0x04, 0xdd, 0xec, 0x7c, 0x59, 0x0a, 0xf3, 0xc8, 0xe0, 0x33, 0x8c,
	0xa6, 0x35, 0x74, 0x06, 0x9d, 0x74, 0xb6, 0xa4, 0xaf, 0xbe, 0x96, 0xa7, 0x4d, 0x9e, 0x25, 0x25,
	0x3e, 0xa9, 0xd3, 0x22, 0x7b, 0xca, 0xfd, 0x81, 0x0a, 0xe7, 0x2d, 0xfb, 0x71, 0x01, 0x79, 0xf9,
	0x91, 0xae, 0x86, 0xbe, 0x02, 0xa0, 0xec, 0xc5, 0x88, 0x5b, 0x45, 0x88, 0x6c, 0xe3, 0x85, 0xcb,
	0x51, 0x98, 0x1f, 0xa0, 0xa7, 0x5c, 0x5e, 0xe5, 0x48, 0x8f, 0x0b, 0x28, 0xd4, 0xcb, 0xfb, 0x0e,
	0xba, 0x99, 0x5b, 0x8f, 0xa0, 0x8f, 0x8c, 0x24, 0xaa, 0xd3, 0x64, 0x59, 0xa1, 0x94, 0xc6, 0x4b,
	0xd8, 0xd0, 0xa6, 0x0c, 0x54, 0xfa, 0xb4, 0xdb, 0x7b, 0xe5, 0x74, 0x2a, 0x0f, 0x3c, 0xab, 0x79,
	0x3d, 0xa5, 0x94, 0xa3, 0x7f, 0x50, 0x86, 0xce, 0x08, 0x29, 0x5d, 0x9e, 0x42, 0x8e, 0x61, 0x43,
	0x1b, 0x7e, 0xaa, 0x51, 0xf7, 0xca, 0x69, 0xce, 0x95, 0xed, 0xc3, 0x86, 0x36, 0xb6, 0xa0, 0x5d,
	0x0d, 0xa2, 0x68, 0xcc, 0x32, 0xac, 0x56, 0x3c, 0x05, 0xd5, 0x10, 0x86, 0x4d, 0xc3, 0x63, 0x88,
	0x2a, 0xde, 0x0d, 0x7b, 0xbf, 0xbc, 0x13, 0xb9, 0xb7, 0xa3, 0x86, 0x7e, 0x84, 0x7e, 0xda, 0x0b,
	0xb9, 0xc6, 0x87, 0xe5, 0x6b, 0x30, 0xe6, 0x2a, 0xca, 0xa0, 0xc0, 0x6f, 0x60, 0xd3, 0xf0, 0x5a,
	0x2f, 0x83, 0xbd, 0x5f, 0xde, 0x15, 0x6d, 0x0b, 0x13, 0xe5, 0x1f, 0x93, 0x70, 0x13, 0x43, 0x63,
	0x8a, 0xa6, 0x83, 0xea, 0xcd, 0xd0, 0x43, 0x11, 0xc2, 0xa6, 0xe1, 0x11, 0x46, 0x9f, 0x94, 0xf7,
	0x54, 0x5d, 0x67, 0x7f, 0xb9, 0xe0, 0x64, 0x63, 0xaf, 0xe8, 0xf3, 0x90, 0x7b, 0x57, 0x0c, 0xd7,
	0x46, 0xea, 0xb4, 0x77, 0x0b, 0x9a, 0x6f, 0x78, 0x97, 0xd8, 0xed, 0xdb, 0xa3, 0x9d, 0xcf, 0x40,
	0x6f, 0x97, 0x40, 0xb3, 0xbe, 0x94, 0x2d, 0x4d, 0xf1, 0x2e, 0xa1, 0x9f, 0x7f, 0xe9, 0x2a, 0x21,
	0x77, 0x0b, 0x5a, 0x6d, 0x2a, 0x78, 0xdc, 0xe4, 0x11, 0x9f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x75, 0xa6, 0x56, 0x1e, 0xe3, 0x11, 0x00, 0x00,
}
