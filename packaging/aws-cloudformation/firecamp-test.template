{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template will deploy an ECS or Swarm cluster with the firecamp software in an existing VPC. Note: The firecamp system will create the HostedZone in AWS Route53. Unfortunately the CloudFormation stack is not able to delete the DNS records. Please manually cleanup the HostedZone after shuting down the stack.",
  "Parameters":{
    "ContainerPlatform":{
      "Type": "String",
      "Default": "ecs",
      "AllowedValues" : [ "ecs", "swarm" ],
      "Description":"The container orchestration platform."
    },
    "ClusterName":{
      "Type":"String",
      "Description":"Name of the cluster.",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the cluster nodes."
    },
    "VPCID":{
      "Type":"AWS::EC2::VPC::Id",
      "Description":"Select a VPC that allows instances to access the Internet."
    },
    "SubnetIDs": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The existing subnets in your VPC where you want to deploy node(s). Please make sure the Subnets match the AvailabilityZones.",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "AvailabilityZones": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "The Availability Zones for the Subnets. Please make sure the AvailabilityZones match the Subnets, or else the cluster will not work."
    },
    "CFS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "Default": "cloudstax",
      "Type": "String",
      "ConstraintDescription": "The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the CloudFormation templates. The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
    "Release": {
      "Type": "String",
      "Default": "0.7.1",
      "AllowedValues": [ "latest", "0.7.1" ],
      "Description": "The FireCamp release version"
    },
    "CFS3KeyPrefix": {
        "Type": "String",
        "Default": "firecamp/releases/0.7.1/cf-templates",
        "Description": "The S3 key prefix"
    },
    "RemoteAccessCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "Type": "String",
      "Default":"0.0.0.0/0",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "Allowed CIDR block to access SSH or the firecamp manage http server."
    },
    "NumberOfManagers":{
      "Type":"Number",
      "Default":"1",
      "Description":"Number of the Swarm manager instances to launch. This field will be ignored for ECS."
    },
    "DesiredCapacity":{
      "Type":"Number",
      "Default":"1",
      "Description":"Number of instances to launch. For Swarm, this is the number of worker nodes. One manager node will be created automatically."
    },
    "MaxSize":{
      "Type":"Number",
      "Default":"1",
      "Description":"Maximum number of instances that can be launched."
    },
    "NodeInstanceType":{
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription":"Please choose a valid instance type."
    }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "AMI": {
        "AMIID": "amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2"
      },
      "ap-northeast-1": {
        "AMIID": "ami-923d12f5"
      },
      "ap-northeast-2": {
        "AMIID": "ami-9d15c7f3"
      },
      "ap-south-1": {
        "AMIID": "ami-52c7b43d"
      },
      "ap-southeast-1": {
        "AMIID": "ami-fc5ae39f"
      },
      "ap-southeast-2": {
        "AMIID": "ami-162c2575"
      },
      "ca-central-1": {
        "AMIID": "ami-0bd66a6f"
      },
      "eu-central-1": {
        "AMIID": "ami-b968bad6"
      },
      "eu-west-1": {
        "AMIID": "ami-01ccc867"
      },
      "eu-west-2": {
        "AMIID": "ami-b6daced2"
      },
      "sa-east-1": {
        "AMIID": "ami-37cfad5b"
      },
      "us-east-1": {
        "AMIID": "ami-c58c1dd3"
      },
      "us-east-2": {
        "AMIID": "ami-4191b524"
      },
      "us-west-1": {
        "AMIID": "ami-7a85a01a"
      },
      "us-west-2": {
        "AMIID": "ami-4836a428"
      }
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources":{
    "AppAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Instances with access to the services in the cluster"
      }
    },
    "ServiceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "The access ports to the services in the cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2000",
            "ToPort": "30000",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          }
        ]
      }
    },
    "InternalAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "The inter-server access ports in the cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2000",
            "ToPort": "30000",
            "SourceSecurityGroupId": {
              "Ref": "ServiceSecurityGroup"
            }
          }
        ]
      }
    },

    "FireCampStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${CFS3BucketName}.${QSS3Region}.amazonaws.com/${CFS3KeyPrefix}/firecamp.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ContainerPlatform": {
            "Ref": "ContainerPlatform"
          },
          "ClusterName": {
            "Ref": "ClusterName"
          },
          "CFS3BucketName": {
            "Ref": "CFS3BucketName"
          },
          "Release": {
            "Ref": "Release"
          },
          "CFS3KeyPrefix": {
            "Ref": "CFS3KeyPrefix"
          },
          "ServiceSecurityGroupID": {
            "Ref": "ServiceSecurityGroup"
          },
          "InternalAccessSecurityGroupID": {
            "Ref": "InternalAccessSecurityGroup"
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "SubnetIDs": {
            "Fn::Join": [
              ",",
              {
                "Ref": "SubnetIDs"
              }
            ]
          },
          "AvailabilityZones": {
            "Fn::Join": [
              ",",
              {
                "Ref": "AvailabilityZones"
              }
            ]
          },
          "NumberOfManagers": {
            "Ref": "NumberOfManagers"
          },
          "DesiredCapacity": {
            "Ref": "DesiredCapacity"
          },
          "MaxSize": {
            "Ref": "MaxSize"
          },
          "NodeInstanceType": {
            "Ref": "NodeInstanceType"
          }
        }
      }
    }
  },
  "Outputs":{
    "AppAccessSecurityGroup":{
      "Value":{
        "Ref": "AppAccessSecurityGroup"
      }
    }
  }
}
