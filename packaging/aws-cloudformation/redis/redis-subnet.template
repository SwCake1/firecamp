{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template creates an AWS ECS cluster and the Redis Cluster Service in an existing VPC. The application runs on RedisAccessSecurityGroup and the same VPC to access Redis.",
  "Parameters":{
    "ServiceSecurityGroupID": {
      "Type": "AWS::EC2::SecurityGroup::Id",
      "Description": "The SecurityGroup to access the cluster nodes."
    },
    "VPCID":{
      "Type":"AWS::EC2::VPC::Id",
      "Description":"Select a VPC that allows instances to access the Internet."
    },
    "SubnetIDs": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The existing subnets in your VPC where you want to deploy node(s). Please make sure the Subnets match the AvailabilityZones.",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "AvailabilityZones": {
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Description": "The Availability Zones for the Subnets. Please make sure the AvailabilityZones match the Subnets, or else the cluster will not work."
    },
    "LambdaSubnetCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
      "Type": "String",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
      "Description": "The Subnet CIDR to run the Redis creation Lambda function."
    },

    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "Default": "qscloudstax",
      "Type": "String",
      "ConstraintDescription": "The Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the Quick Start. The Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
    "QSFireCampS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "cloudstax/firecamp/latest/",
      "Type": "String"
    },
    "QSRedisS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "cloudstax/redis/latest/",
      "Type": "String"
    },
    "ClusterName":{
      "Type":"String",
      "Description":"Name of the cluster.",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },
    "ServiceName": {
      "Type": "String",
      "Description": "The Redis Service Name",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },
    "Shards": {
      "Type": "Number",
      "Default": "3",
      "Description": "Number of Redis shards"
    },
    "ReplicasPerShard": {
      "Type": "Number",
      "Default": "2",
      "Description": "Number of replicas per shard"
    },
    "MemoryCacheSizeMB": {
      "Type": "Number",
      "Default": "256",
      "Description": "The memory cache size of one Redis node"
    },
    "VolumeSizeGB": {
      "Type": "Number",
      "Default": "1",
      "Description": "The Redis node volume size. If AOF is enabled, volume size should be 6x of memory cache size. If AOF is disabled, volume size could be 2x of memory cache size."
    },
    "DisableAOF": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Enable/Disable Redis append only file"
    },
    "AuthPass": {
      "Type": "String",
      "Default": "",
      "NoEcho": "true",
      "MaxLength": "255",
      "Description": "Enter your Redis AUTH Password",
      "ConstraintDescription": "Input your Redis AUTH password"
    },
    "MaxMemoryPolicy": {
      "Type": "String",
      "Default": "allkeys-lru",
      "AllowedValues": [
        "noeviction",
        "volatile-lru",
        "allkeys-lru",
        "volatile-lfu",
        "allkeys-lfu",
        "volatile-random",
        "allkeys-random",
        "volatile-ttl"
      ],
      "Description": "Redis eviction policy when the memory limit is reached"
    },
    "ConfigCommandName": {
      "Type": "String",
      "Default": "",
      "Description": "The new name for Redis CONFIG command, empty name means disable the command",
      "MinLength": "0",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters."
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources":{
    "RedisLambdaSubnet": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSFireCampS3KeyPrefix}templates/firecamp-existingvpc-lambdanet.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "VPCID": {
            "Ref": "VPCID"
          },
          "SubnetIDs": {
            "Fn::Join": [
              ",",
              {
                "Ref": "SubnetIDs"
              }
            ]
          },
          "AvailabilityZones": {
            "Fn::Join": [
              ",",
              {
                "Ref": "AvailabilityZones"
              }
            ]
          },
          "LambdaSubnetCIDR": {
            "Ref": "LambdaSubnetCIDR"
          },
          "NameTag": {
            "Fn::Join": [
              "-",
              [
                {
                  "Ref": "ClusterName"
                },
                "redis-lambda"
              ]
            ]
          }
        }
      }
    },

    "RedisLambda": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSRedisS3KeyPrefix}templates/redis-lambda.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ClusterName": {
            "Ref": "ClusterName"
          },
          "ServiceName": {
            "Ref": "ServiceName"
          },
          "Shards": {
            "Ref": "Shards"
          },
          "ReplicasPerShard": {
            "Ref": "ReplicasPerShard"
          },
          "MemoryCacheSizeMB": {
            "Ref": "MemoryCacheSizeMB"
          },
          "VolumeSizeGB": {
            "Ref": "VolumeSizeGB"
          },
          "DisableAOF": {
            "Ref": "DisableAOF"
          },
          "AuthPass": {
            "Ref": "AuthPass"
          },
          "MaxMemoryPolicy": {
            "Ref": "MaxMemoryPolicy"
          },
          "ConfigCommandName": {
            "Ref": "ConfigCommandName"
          },
          "QSS3BucketName": {
            "Ref": "QSS3BucketName"
          },
          "QSFireCampS3KeyPrefix": {
            "Ref": "QSFireCampS3KeyPrefix"
          },
          "QSRedisS3KeyPrefix": {
            "Ref": "QSRedisS3KeyPrefix"
          },
          "ServiceSecurityGroupID": {
            "Ref": "ServiceSecurityGroupID"
          },
          "SubnetIDs": {
            "Fn::GetAtt": [
              "RedisLambdaSubnet",
              "Outputs.LambdaSubnet"
            ]
          }
        }
      }
    }
  }
}
