{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template creates the Lambda Role, and the destroy function that cleans up the Lambda ENI.",
  "Resources":{
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Action": ["sts:AssumeRole"],
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            }
          }],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [{
          "PolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "arn:aws:logs:*:*:*"
              },
              {
                "Action": [
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DetachNetworkInterface",
                  "ec2:DeleteNetworkInterface"
                ],
                "Effect": "Allow",
                "Resource": "*"
              }
            ],
            "Version": "2012-10-17"
          },
          "PolicyName": "root"
        }]
      }
    },

    "VPCDestroyENIFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var response = require('cfn-response');\n",
                "var AWS = require('aws-sdk');\n",
                "exports.handler = function(event, context) {\n",
                "  // https://stackoverflow.com/questions/41299662/aws-lambda-created-eni-not-deleting-while-deletion-of-stack\n",
                "  console.log(\"REQUEST RECEIVED:\", JSON.stringify(event));\n",
                "  if (event.RequestType != 'Delete') {\n",
                "    response.send(event, context, response.SUCCESS, {});\n",
                "    return;\n",
                "  }\n",
                "\n",
                "  // https://github.com/hashicorp/terraform/issues/5767\n",
                "  var ec2 = new AWS.EC2();\n",
                "  var params = {\n",
                "    Filters: [\n",
                "      {\n",
                "        Name: 'group-id',\n",
                "        Values: event.ResourceProperties.SecurityGroups\n",
                "      },\n",
                "      {\n",
                "        Name: 'description',\n",
                "        Values: ['AWS Lambda VPC ENI: *']\n",
                "      }\n",
                "    ]\n",
                "  };\n",
                "\n",
                "  console.log(\"Deleting attachments!\");\n",
                "  // Detach all network-interface attachments\n",
                "  ec2.describeNetworkInterfaces(params).promise().then(function(data) {\n",
                "    console.log(\"Got Interfaces:\", JSON.stringify(data));\n",
                "    return Promise.all(data.NetworkInterfaces.map(function(networkInterface) {\n",
                "      var networkInterfaceId = networkInterface.NetworkInterfaceId;\n",
                "      var attachmentId = networkInterface.Attachment.AttachmentId;\n",
                "      return ec2.detachNetworkInterface({AttachmentId: attachmentId}).promise().then(function(data) {\n",
                "        return ec2.waitFor('networkInterfaceAvailable', {NetworkInterfaceIds: [networkInterfaceId]}).promise();\n",
                "      }).then(function(data) {\n",
                "        console.log(\"Detached Interface, deleting:\", networkInterfaceId);\n",
                "        return ec2.deleteNetworkInterface({NetworkInterfaceId: networkInterfaceId}).promise();\n",
                "      });\n",
                "    }));\n",
                "  }).then(function(data) {\n",
                "    console.log(\"Success!\");\n",
                "    response.send(event, context, response.SUCCESS, {});\n",
                "  }).catch(function(err) {\n",
                "    console.log(\"Failure:\", JSON.stringify(err));\n",
                "    response.send(event, context, response.FAILED, {});\n",
                "  });\n",
                "};\n"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": "300",
        "Runtime": "nodejs4.3"
      }
    },
    "VPCDestroyENIFunctionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DependsOn": "VPCDestroyENIFunction",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "VPCDestroyENIFunction"}]]},
        "RetentionInDays": 1
      }
    }
  },
  "Outputs": {
    "LambdaExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt" : [
          "LambdaExecutionRole",
          "Arn"
        ]
      }
    },
    "VPCDestroyENIFunctionArn": {
      "Value": {
        "Fn::GetAtt": [
          "VPCDestroyENIFunction",
          "Arn"
        ]
      }
    }
  }
}
