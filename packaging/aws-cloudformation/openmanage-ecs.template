{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template will create a new VPC and deploy an ECS cluster.",
  "Parameters":{
    "BastionSecurityGroupID": {
      "Description": "ID of the Bastion Security Group (e.g., sg-7f16e910)",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },

    "ECSClusterName":{
      "Type":"String",
      "Description":"Name of the ECS cluster.",
      "Default":"default",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },

    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
    },

    "CFS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "Default": "cloudstax-cf-templates",
      "Type": "String",
      "ConstraintDescription": "The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the CloudFormation templates. The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
		"CFS3KeyPrefix": {
		    "AllowedPattern": "^[0-9a-zA-Z-/]*$",
		    "Default": "openmanage/latest/",
		    "Type": "String",
		    "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
		    "Description": "S3 key prefix for the CloudFormation assets. The CloudFormation S3 key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)."
		},

    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to deploy the ECS cluster.",
      "AllowedPattern": "vpc-[0-9a-z]{8}"
    },
    "Subnet1ID": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy the first AutoScalingGroup.",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "Subnet2ID": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy the second AutoScalingGroup.",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },
    "Subnet3ID": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy the third AutoScalingGroup.",
      "AllowedPattern": "subnet-[0-9a-z]{8}"
    },

    "DesiredCapacityPerAZ":{
      "Type":"Number",
      "Default":"1",
      "Description":"Number of instances to launch in one AutoScalingGroup."
    },
    "MaxSizePerAZ":{
      "Type":"Number",
      "Default":"1",
      "Description":"Maximum number of instances that can be launched in one AutoScalingGroup."
    },
    "NodeInstanceType":{
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"t2.micro",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription":"Please choose a valid instance type."
    }
  },
  "Conditions": {
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources":{
    "EcsAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "Instances with access to the services in ECS cluster"
      }
    },
    "EcsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "The access ports to the services in ECS cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroupID"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "30000",
            "SourceSecurityGroupId": {
              "Ref": "EcsAccessSecurityGroup"
            }
          }
        ]
      }
    },
    "EcsInternalSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "The inter-server access ports in ECS cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "30000",
            "SourceSecurityGroupId": {
              "Ref": "EcsSecurityGroup"
            }
          }
        ]
      }
    },

    "ECSCluster":{
      "Type":"AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {
          "Ref": "ECSClusterName"
        }
      }
    },
    "taskdefinition":{
      "Type":"AWS::ECS::TaskDefinition",
      "Properties":{
        "Family":{
          "Fn::Join":[
            "-",
            [
              {
                "Ref":"ECSClusterName"
              },
              "openmanage-manageserver"
            ]
          ]
        },
        "ContainerDefinitions":[
          {
            "Name":{
              "Fn::Join":[
                "-",
                [
                  {
                    "Ref": "ECSClusterName"
                  },
                  "openmanage-manageserver-container"
                ]
              ]
            },
            "Cpu":"256",
            "Essential":"true",
            "Image":"cloudstax/openmanage-manageserver",
            "Memory":"2048",
            "MemoryReservation":"128",
            "PortMappings":[
              {
                "ContainerPort": "27040",
                "HostPort": "27040",
                "Protocol": "tcp"
              }
            ],
            "Environment":[
              {
                "Name": "CONTAINER_PLATFORM",
                "Value": "ecs"
              },
              {
                "Name": "DB_TYPE",
                "Value": "clouddb"
              }
            ]
          }
        ]
      }
    },
    "service":{
      "Type":"AWS::ECS::Service",
      "Properties":{
        "Cluster":{
          "Ref":"ECSCluster"
        },
        "DesiredCount":"1",
        "ServiceName": "openmanage-manageserver",
        "TaskDefinition":{
          "Ref":"taskdefinition"
        }
      }
    },

    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"openmanage-ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "autoscaling:*",
                    "ecs:*",
                    "dynamodb:*",
                    "ec2:*",
                    "route53:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "NodeInstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },

    "ECSAutoScalingGroup1": {
      "DependsOn": "ECSCluster",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${CFS3BucketName}.${QSS3Region}.amazonaws.com/${CFS3KeyPrefix}templates/openmanage-autoscalegroup.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ECSClusterName": {
            "Ref": "ECSClusterName"
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "SubnetID": {
            "Ref": "Subnet1ID"
          },
          "DesiredCapacityPerAZ": {
            "Ref": "DesiredCapacityPerAZ"
          },
          "MaxSizePerAZ":{
            "Ref": "MaxSizePerAZ"
          },
          "EcsSecurityGroupID": {
            "Ref": "EcsSecurityGroup"
          },
          "EcsInternalSecurityGroupID": {
            "Ref": "EcsInternalSecurityGroup"
          },
          "NodeInstanceProfileID": {
            "Ref": "NodeInstanceProfile"
          },
          "NodeInstanceType":{
            "Ref": "NodeInstanceType"
          }
        }
      }
    },
    "ECSAutoScalingGroup2": {
      "DependsOn": "ECSCluster",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${CFS3BucketName}.${QSS3Region}.amazonaws.com/${CFS3KeyPrefix}templates/openmanage-autoscalegroup.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ECSClusterName": {
            "Ref": "ECSClusterName"
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "SubnetID": {
            "Ref": "Subnet2ID"
          },
          "DesiredCapacityPerAZ": {
            "Ref": "DesiredCapacityPerAZ"
          },
          "MaxSizePerAZ":{
            "Ref": "MaxSizePerAZ"
          },
          "EcsSecurityGroupID": {
            "Ref": "EcsSecurityGroup"
          },
          "EcsInternalSecurityGroupID": {
            "Ref": "EcsInternalSecurityGroup"
          },
          "NodeInstanceProfileID": {
            "Ref": "NodeInstanceProfile"
          },
          "NodeInstanceType":{
            "Ref": "NodeInstanceType"
          }
        }
      }
    },
    "ECSAutoScalingGroup3": {
      "DependsOn": "ECSCluster",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${CFS3BucketName}.${QSS3Region}.amazonaws.com/${CFS3KeyPrefix}templates/openmanage-autoscalegroup.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ECSClusterName": {
            "Ref": "ECSClusterName"
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "SubnetID": {
            "Ref": "Subnet3ID"
          },
          "DesiredCapacityPerAZ": {
            "Ref": "DesiredCapacityPerAZ"
          },
          "MaxSizePerAZ":{
            "Ref": "MaxSizePerAZ"
          },
          "EcsSecurityGroupID": {
            "Ref": "EcsSecurityGroup"
          },
          "EcsInternalSecurityGroupID": {
            "Ref": "EcsInternalSecurityGroup"
          },
          "NodeInstanceProfileID": {
            "Ref": "NodeInstanceProfile"
          },
          "NodeInstanceType":{
            "Ref": "NodeInstanceType"
          }
        }
      }
    }
  },
  "Outputs":{
    "ecscluster":{
      "Value":{
        "Ref":"ECSCluster"
      }
    }
  }
}
