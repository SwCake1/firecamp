{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description": "This template creates a new VPC and an AWS ECS or Swarm cluster with the FireCamp software. The BastionSecurityGroup is the only one that is allowed to ssh to the cluster nodes and access the firecamp manage http server. Note: The FireCamp system will create the HostedZone in AWS Route53. Unfortunately the CloudFormation stack is not able to delete the DNS records. Please manually cleanup the HostedZone after shuting down the stack.",
  "Parameters":{
    "ContainerPlatform":{
      "Type": "String",
      "Default": "ecs",
      "AllowedValues" : [ "ecs", "swarm" ],
      "Description":"The container orchestration platform."
    },
    "ClusterName":{
      "Type":"String",
      "Description":"Name of the ECS or Swarm cluster. Could be same with the Stack name",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "Cluster name must start with a letter and can only contain letters, numbers, or hyphens."
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the Bastion and cluster nodes."
    },
    "CFS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "Default": "cloudstax",
      "Type": "String",
      "ConstraintDescription": "The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Description": "S3 bucket name for the CloudFormation templates. The CloudFormation template bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    },
    "Release": {
      "Type": "String",
      "Default": "latest",
      "AllowedValues": [ "latest", "0.8.0", "0.7.1" ],
      "Description": "The FireCamp release version"
    },
    "CFS3KeyPrefix": {
        "Type": "String",
        "Default": "firecamp/releases/latest/cf-templates",
        "Description": "The S3 key prefix"
    },
    "QSS3BucketName": {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
      "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Default": "quickstart-reference",
      "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
      "Type": "String"
    },
    "QSAWSVPCS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "aws/vpc/latest/",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Type": "String"
    },
    "QSBastionS3KeyPrefix": {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
      "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Default": "linux/bastion/latest/",
      "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
      "Type": "String"
    },
    "BastionAMIOS": {
      "AllowedValues": [
        "Amazon-Linux-HVM",
        "CentOS-7-HVM",
        "Ubuntu-Server-14.04-LTS-HVM",
        "Ubuntu-Server-16.04-LTS-HVM"
      ],
      "Default": "Amazon-Linux-HVM",
      "Description": "The Linux distribution for the AMI to be used for the bastion instances",
      "Type": "String"
    },
    "RemoteAccessCIDR": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
        "Type": "String",
        "Default": "0.0.0.0/0",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
        "Description": "Allowed CIDR block for external SSH access to the Bastion nodes"
    },
    "BastionInstanceType": {
        "Default": "t2.micro",
        "Type": "String",
        "Description": "Amazon EC2 instance type for the second bastion instance",
        "AllowedValues": [
            "t2.nano",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "t2.large",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge"
        ]
    },
    "NumBastionHosts": {
      "AllowedValues": [
        "1",
        "2",
        "3",
        "4"
      ],
      "Default": "1",
      "Description": "Enter the number of bastion hosts to create",
      "Type": "String"
    },
    "AvailabilityZones": {
      "Description": "List of Availability Zones to use for the subnets in the VPC. This MUST match the NumberOfAZs. Please use 3 AvailabilityZones for the production system.",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "NumberOfAZs": {
      "AllowedValues": [
        "2",
        "3"
      ],
      "Description": "Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter. Please use 3 AZs for the production system.",
      "Default": "3",
      "Type": "String"
    },
    "VPCCIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "Default": "10.0.0.0/16",
      "Type": "String",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Description": "CIDR Block for the VPC"
    },
    "PrivateSubnet1CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.0.0/19",
      "Description": "CIDR block for private subnet 1 located in Availability Zone 1.",
      "Type": "String"
    },
    "PrivateSubnet2CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.32.0/19",
      "Description": "CIDR block for private subnet 2 located in Availability Zone 2.",
      "Type": "String"
    },
    "PrivateSubnet3CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.64.0/19",
      "Description": "CIDR block for private subnet 2 located in Availability Zone 2.",
      "Type": "String"
    },
    "PublicSubnet1CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.128.0/20",
      "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
      "Type": "String"
    },
    "PublicSubnet2CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.144.0/20",
      "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
      "Type": "String"
    },
    "PublicSubnet3CIDR": {
      "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
      "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
      "Default": "10.0.160.0/20",
      "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
      "Type": "String"
    },
    "NumberOfManagers":{
      "Type":"Number",
      "Default":"3",
      "Description":"Number of the Swarm manager instances to launch. This field will be ignored for ECS."
    },
    "DesiredCapacity":{
      "Type":"Number",
      "Default":"3",
      "Description":"Number of instances to launch in the cluster."
    },
    "MaxSize":{
      "Type":"Number",
      "Default":"3",
      "Description":"Maximum number of instances that can be launched in the cluster."
    },
    "NodeInstanceType":{
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"m4.large",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription":"Please choose a valid instance type."
    }
  },
  "Conditions": {
    "2AZCondition": {
      "Fn::Equals": [
        {
          "Ref": "NumberOfAZs"
        },
        2
      ]
    },
    "GovCloudCondition": {
      "Fn::Equals": [
        {
          "Ref": "AWS::Region"
        },
        "us-gov-west-1"
      ]
    }
  },
  "Resources":{
    "VPCStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSAWSVPCS3KeyPrefix}templates/aws-vpc.template",
            {
              "QSS3Region": {
                "Fn::If": [
                 "GovCloudCondition",
                 "s3-us-gov-west-1",
                 "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "AvailabilityZones": {
            "Fn::Join": [
              ",",
              {
                "Ref": "AvailabilityZones"
              }
            ]
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "NumberOfAZs": {
            "Ref": "NumberOfAZs"
          },
          "PrivateSubnet1ACIDR": {
            "Ref": "PrivateSubnet1CIDR"
          },
          "PrivateSubnet2ACIDR": {
            "Ref": "PrivateSubnet2CIDR"
          },
          "PrivateSubnet3ACIDR": {
            "Ref": "PrivateSubnet3CIDR"
          },
          "PublicSubnet1CIDR": {
            "Ref": "PublicSubnet1CIDR"
          },
          "PublicSubnet2CIDR": {
            "Ref": "PublicSubnet2CIDR"
          },
          "PublicSubnet3CIDR": {
            "Ref": "PublicSubnet3CIDR"
          },
          "VPCCIDR": {
            "Ref": "VPCCIDR"
          }
        }
      }
    },
    "BastionStack": {
      "DependsOn": "VPCStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSBastionS3KeyPrefix}templates/linux-bastion.template",
            {
              "QSS3Region": {
                "Fn::If": [
                 "GovCloudCondition",
                 "s3-us-gov-west-1",
                 "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "BastionInstanceType": {
            "Ref": "BastionInstanceType"
          },
          "NumBastionHosts": {
            "Ref": "NumBastionHosts"
          },
          "BastionAMIOS": {
            "Ref": "BastionAMIOS"
          },
          "EnableTCPForwarding": "true",
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "PublicSubnet1ID": {
            "Fn::GetAtt": [
              "VPCStack",
              "Outputs.PublicSubnet1ID"
            ]
          },
          "PublicSubnet2ID": {
            "Fn::GetAtt": [
              "VPCStack",
              "Outputs.PublicSubnet2ID"
            ]
          },
          "QSS3BucketName": {
            "Ref": "QSS3BucketName"
          },
          "QSS3KeyPrefix": {
            "Ref": "QSBastionS3KeyPrefix"
          },
          "RemoteAccessCIDR": {
            "Ref": "RemoteAccessCIDR"
          },
          "VPCID": {
            "Fn::GetAtt": [
              "VPCStack",
              "Outputs.VPCID"
            ]
          }
        }
      }
    },

    "AppAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStack",
            "Outputs.VPCID"
          ]
        },
        "GroupDescription": "Application instances with access to the services in cluster"
      }
    },
    "ServiceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStack",
            "Outputs.VPCID"
          ]
        },
        "GroupDescription": "The access ports to the services in cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "BastionStack",
                "Outputs.BastionSecurityGroupID"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "27040",
            "ToPort": "27040",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "BastionStack",
                "Outputs.BastionSecurityGroupID"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "27017",
            "ToPort": "27017",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9042",
            "ToPort": "9042",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9160",
            "ToPort": "9160",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2181",
            "ToPort": "2181",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9092",
            "ToPort": "9092",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6379",
            "ToPort": "6379",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5984",
            "ToPort": "5984",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6984",
            "ToPort": "6984",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8300",
            "ToPort": "8300",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8301",
            "ToPort": "8301",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9200",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5601",
            "ToPort": "5601",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9600",
            "ToPort": "9600",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5044",
            "ToPort": "5044",
            "SourceSecurityGroupId": {
              "Ref": "AppAccessSecurityGroup"
            }
          }
        ]
      }
    },
    "InternalAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Fn::GetAtt": [
            "VPCStack",
            "Outputs.VPCID"
          ]
        },
        "GroupDescription": "The inter-server access ports in cluster",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2000",
            "ToPort": "30000",
            "SourceSecurityGroupId": {
              "Ref": "ServiceSecurityGroup"
            }
          }
        ]
      }
    },

    "FireCampStack": {
      "DependsOn": "BastionStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": [
            "https://${CFS3BucketName}.${QSS3Region}.amazonaws.com/${CFS3KeyPrefix}/firecamp.template",
            {
              "QSS3Region": {
                "Fn::If": [
                  "GovCloudCondition",
                  "s3-us-gov-west-1",
                  "s3"
                ]
              }
            }
          ]
        },
        "Parameters": {
          "ContainerPlatform": {
            "Ref": "ContainerPlatform"
          },
          "ClusterName": {
            "Ref": "ClusterName"
          },
          "CFS3BucketName": {
            "Ref": "CFS3BucketName"
          },
          "Release": {
            "Ref": "Release"
          },
          "CFS3KeyPrefix": {
            "Ref": "CFS3KeyPrefix"
          },
          "ServiceSecurityGroupID": {
            "Ref": "ServiceSecurityGroup"
          },
          "InternalAccessSecurityGroupID": {
            "Ref": "InternalAccessSecurityGroup"
          },
          "KeyPairName": {
            "Ref": "KeyPairName"
          },
          "SubnetIDs": {
            "Fn::If": [
              "2AZCondition",
              "Fn::Join": [
                ",",
                [
                  "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PrivateSubnet1AID"
                  ],
                  "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PrivateSubnet2AID"
                  ]
                ]
              ],
              "Fn::Join": [
                ",",
                [
                  "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PrivateSubnet1AID"
                  ],
                  "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PrivateSubnet2AID"
                  ],
                  "Fn::GetAtt": [
                    "VPCStack",
                    "Outputs.PrivateSubnet3AID"
                  ]
                ]
              ]
            ]
          },
          "AvailabilityZones": {
            "Fn::Join": [
              ",",
              {
                "Ref": "AvailabilityZones"
              }
            ]
          },
          "NumberOfManagers": {
            "Ref": "NumberOfManagers"
          },
          "DesiredCapacity": {
            "Ref": "DesiredCapacity"
          },
          "MaxSize": {
            "Ref": "MaxSize"
          },
          "NodeInstanceType": {
            "Ref": "NodeInstanceType"
          }
        }
      }
    }
  },
  "Outputs":{
    "VPCID": {
      "Value":{
        "Fn::GetAtt": [
          "VPCStack",
          "Outputs.VPCID"
        ]
      }
    },
    "AppAccessSecurityGroup":{
      "Value":{
        "Ref": "AppAccessSecurityGroup"
      }
    }
  }
}
