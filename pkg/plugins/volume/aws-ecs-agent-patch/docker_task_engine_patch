@@ func (engine *DockerTaskEngine) createContainer(task *api.Task, container *api.C
@@ around line 592

 	dockerContainerName := "ecs-" + task.Family + "-" + task.Version + "-" + name + "-" + utils.RandHex()

+	seelog.Infof("firecamp volume task.Family %s, task.Version %s, task %s", task.Family, task.Version, task)
+	seelog.Infof("firecamp volume creating container name %s, DockerConfig %s, VolumesFrom %s, MountPoints %s, Links %s, container %s", dockerContainerName, container.DockerConfig, container.VolumesFrom, container.MountPoints, container.Links, container)
+	seelog.Infof("firecamp volume hostConfig Binds %s, VolumesFrom %s, VolumeDriver %s, hostConfig %s", hostConfig.Binds, hostConfig.VolumesFrom, hostConfig.VolumeDriver, hostConfig)
+
+	hostConfig, vderr := AddVolumeDriver(hostConfig, engine.cfg.Cluster, task.Arn, task.Family)
+ if vderr != nil {
+   return dockerapi.DockerContainerMetadata{Error: apierrors.NamedError(vderr)}
+ }
+
+	seelog.Infof("firecamp volume updated hostConfig Binds %s, VolumeDriver %s, LogConfig %s", hostConfig.Binds, hostConfig.VolumeDriver, hostConfig.LogConfig)
+
 	// Pre-add the container in case we stop before the next, more useful,
 	// AddContainer call. This ensures we have a way to get the container if
 	// we die before 'createContainer' returns because we can inspect by
